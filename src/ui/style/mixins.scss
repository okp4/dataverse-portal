@import '@/ui/style/theme.scss';

@mixin use-breakpoints($breakpoints) {
  @each $breakpoint in $breakpoints {
    @if $breakpoint == 'mobile' {
      @media (max-width: 595px) {
        @content;
      }
    }
    @if $breakpoint == 'tablet' {
      @media (min-width: 596px) and (max-width: 1439px) {
        @content;
      }
    }
    @if $breakpoint == 'desktop' {
      @media (min-width: 1440px) and (max-width: 1919px) {
        @content;
      }
    }
    @if $breakpoint == 'large-desktop' {
      @media (min-width: 1920px) {
        @content;
      }
    }
  }
}

@mixin grid-container($colsNb: 12, $colsSize: 1fr, $colGutter, $rowGutter: null) {
  display: grid;
  grid-template-columns: repeat($colsNb, $colsSize);
  column-gap: $colGutter;
  @if $rowGutter {
    row-gap: $rowGutter;
  }
  @content;
}

@mixin grid-item($colStart: auto, $colEnd: auto, $rowStart: auto, $rowEnd: auto) {
  grid-column-start: $colStart;
  grid-column-end: $colEnd;
  grid-row-start: $rowStart;
  grid-row-end: $rowEnd;
  @content;
}

@mixin blurred-page($length) {
  position: relative;
  filter: blur($length);
}

@mixin transition-bg-color {
  transition: background-color 200ms ease-in-out;
}

@mixin twelve-column-layout {
  @include use-breakpoints(('mobile')) {
    @include grid-container($colsNb: 6, $colGutter: 16px);
  }

  @include use-breakpoints(('tablet')) {
    @include grid-container($colsNb: 8, $colGutter: 16px);
  }

  @include use-breakpoints(('desktop')) {
    @include grid-container($colGutter: 34px);
  }

  @include use-breakpoints(('large-desktop')) {
    @include grid-container($colGutter: 48px);
  }
}

@mixin bi-column-item($side) {
  @if not($side == 'left' or $side == 'right') {
    @error '#{$side} is not a valid argument, accepted arguments: left, right';
  }
  @if ($side == 'left') {
    @include use-breakpoints(('mobile', 'tablet')) {
      @include grid-item($colStart: 1, $colEnd: -1, $rowStart: auto, $rowEnd: auto);
    }

    @include use-breakpoints(('desktop', 'large-desktop')) {
      @include grid-item($colStart: 1, $colEnd: 7, $rowStart: auto, $rowEnd: auto);
    }
  } @else if ($side == 'right') {
    @include use-breakpoints(('mobile', 'tablet')) {
      @include grid-item($colStart: 1, $colEnd: -1, $rowStart: auto, $rowEnd: auto);
    }

    @include use-breakpoints(('desktop', 'large-desktop')) {
      @include grid-item($colStart: 7, $colEnd: 13, $rowStart: auto, $rowEnd: auto);
    }
  }
}

@mixin norse-gradient-header($line-height: 36px) {
  @include norse-font(700);
  width: fit-content;
  line-height: $line-height;
  letter-spacing: 4px;
  font-size: 24px;
  background: linear-gradient(270deg, themed('turquoise-emphasis-500') 17.51%, themed('darkblue-emphasis-500') 100%);
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin columns-with-gap($gap) {
  display: flex;
  flex-direction: column;
  gap: $gap;
}

@mixin rows-with-gap($gap) {
  display: flex;
  gap: $gap;
}

@mixin rotation-animation($degrees) {
  transform: rotate($degrees);
  transition: transform 0.1s linear;
}

@mixin scrollbars($size: 6px, $foreground-color, $background-color) {
  // Chrome & Safari
  &::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  &::-webkit-scrollbar-thumb {
    background: $foreground-color;
    border-radius: calc($size / 2);
  }

  &::-webkit-scrollbar-track {
    background: $background-color;
    border-radius: calc($size / 2);
  }

  // Standard version (Firefox only for now)
  scrollbar-color: $foreground-color $background-color;
  scrollbar-width: thin;
}

@mixin custom-dashed-border($color, $width, $dashArray, $border-radius: 0, $offset: 0) {
  background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='#{$border-radius}' ry='#{$border-radius}' stroke='#{$color}' stroke-width='#{$width}' stroke-dasharray='#{$dashArray}' stroke-dashoffset='#{$offset}' stroke-linecap='square'/%3e%3c/svg%3e");
}

@mixin button($content-color, $background-color, $box-shadow, $hover-color, $pressed-color) {
  @include transition-bg-color;
  display: flex;
  justify-content: center;
  width: 100%;
  color: $content-color;
  border-radius: 12px;
  background-color: $background-color;
  box-shadow: $box-shadow;

  &:hover {
    &:not(.disabled) {
      background: $hover-color;
      border-color: $hover-color;
      box-shadow: none;
    }
  }

  &:focus{
    &.disabled {
      outline: 1px solid themed('neutral-emphasis-600');
    }

    &:not(.disabled) {
      background-color: $pressed-color;
      box-shadow: none;
    }
  }

  &:active {
    box-shadow: none;
  }

  &.disabled {
    cursor: unset;
    background-color: themed('neutral-emphasis-200');
    color: themed('neutral-emphasis-600');
    box-shadow: none;

    svg {
      path {
        fill: themed('neutral-emphasis-600');
      }
    }
  }
}
